#!/bin/bash

echo "üèãÔ∏è Fitness Store - Setup Autom√°tico"
echo "===================================="
echo ""

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

set -e  # Exit on error

# ============================================
# VERIFICA√á√ïES DE PR√â-REQUISITOS
# ============================================

echo "üîç Verificando pr√©-requisitos..."
echo ""

# Verificar Python
echo "üêç Verificando Python..."
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Python 3 n√£o encontrado. Instale: https://python.org${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Python $(python3 --version)${NC}"

# Verificar Node.js
echo "üì± Verificando Node.js..."
if ! command -v node &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Node.js n√£o encontrado (necess√°rio para mobile)${NC}"
    echo "   Instale: https://nodejs.org"
    SKIP_MOBILE=true
else
    echo -e "${GREEN}‚úÖ Node.js $(node -v)${NC}"
    SKIP_MOBILE=false
fi

# Verificar npm
if [ "$SKIP_MOBILE" = false ]; then
    echo "üì¶ Verificando npm..."
    if ! command -v npm &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  npm n√£o encontrado${NC}"
        SKIP_MOBILE=true
    else
        echo -e "${GREEN}‚úÖ npm $(npm -v)${NC}"
    fi
fi

# Verificar Docker (opcional)
echo "üê≥ Verificando Docker..."
if command -v docker &> /dev/null; then
    echo -e "${GREEN}‚úÖ Docker $(docker --version)${NC}"
    HAS_DOCKER=true
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker n√£o encontrado (opcional)${NC}"
    HAS_DOCKER=false
fi

# Verificar Docker Compose (opcional)
if [ "$HAS_DOCKER" = true ]; then
    echo "üì¶ Verificando Docker Compose..."
    if command -v docker-compose &> /dev/null; then
        echo -e "${GREEN}‚úÖ Docker Compose $(docker-compose --version)${NC}"
        HAS_DOCKER_COMPOSE=true
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Docker Compose n√£o encontrado${NC}"
        HAS_DOCKER_COMPOSE=false
    fi
fi

echo ""
echo -e "${GREEN}================================================${NC}"
echo -e "${GREEN}Todos os pr√©-requisitos verificados!${NC}"
echo -e "${GREEN}================================================${NC}"
echo ""

# ============================================
# SETUP DO BACKEND
# ============================================

echo "üêç CONFIGURANDO BACKEND"
echo "============================================"
echo ""

cd backend

# Criar ambiente virtual
if [ ! -d "venv" ]; then
    echo "üì¶ Criando ambiente virtual..."
    python3 -m venv venv
    echo -e "${GREEN}‚úÖ Ambiente virtual criado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Ambiente virtual j√° existe${NC}"
fi

# Ativar ambiente virtual
echo "üîå Ativando ambiente virtual..."
source venv/bin/activate

# Instalar depend√™ncias
echo "üì• Instalando depend√™ncias do backend..."
pip install --upgrade pip > /dev/null
pip install -r requirements.txt > /dev/null
echo -e "${GREEN}‚úÖ Depend√™ncias instaladas${NC}"

# Criar .env
if [ ! -f ".env" ]; then
    echo "üîß Criando arquivo .env do backend..."
    cp .env.example .env
    echo -e "${GREEN}‚úÖ backend/.env criado${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Edite backend/.env se necess√°rio${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  backend/.env j√° existe${NC}"
fi

# Criar banco de dados
if [ ! -f "fitness_store.db" ]; then
    echo "üóÑÔ∏è  Criando banco de dados..."
    python recreate_db.py > /dev/null 2>&1
    echo -e "${GREEN}‚úÖ Banco de dados criado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Banco de dados j√° existe${NC}"
fi

# Criar usu√°rio admin
echo "üë§ Criando usu√°rio administrador..."
python create_user.py > /dev/null 2>&1 || true
echo -e "${GREEN}‚úÖ Usu√°rio admin criado${NC}"
echo "   Email: admin@fitnessstore.com"
echo "   Senha: admin123"

# Criar categorias
echo "üìÅ Criando categorias iniciais..."
if [ -f "create_categories.py" ]; then
    python create_categories.py > /dev/null 2>&1 || true
    echo -e "${GREEN}‚úÖ Categorias criadas${NC}"
fi

cd ..

echo ""
echo -e "${GREEN}‚úÖ Backend configurado com sucesso!${NC}"
echo ""

# ============================================
# SETUP DO MOBILE
# ============================================

if [ "$SKIP_MOBILE" = false ]; then
    echo "üì± CONFIGURANDO MOBILE"
    echo "============================================"
    echo ""
    
    cd mobile
    
    # Instalar depend√™ncias
    echo "üì• Instalando depend√™ncias do mobile (pode demorar)..."
    npm install > /dev/null 2>&1
    echo -e "${GREEN}‚úÖ Depend√™ncias instaladas${NC}"
    
    # Criar .env
    if [ ! -f ".env" ]; then
        echo "üîß Criando arquivo .env do mobile..."
        
        # Detectar IP automaticamente
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            IP=$(ipconfig getifaddr en0 2>/dev/null || echo "192.168.1.100")
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            # Linux
            IP=$(hostname -I 2>/dev/null | awk '{print $1}' || echo "192.168.1.100")
        else
            # Fallback
            IP="192.168.1.100"
        fi
        
        cp .env.example .env
        
        # Substituir IP no arquivo
        if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s/192.168.1.100/$IP/g" .env
        else
            sed -i "s/192.168.1.100/$IP/g" .env
        fi
        
        echo -e "${GREEN}‚úÖ mobile/.env criado com IP: $IP${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Verifique se o IP est√° correto em mobile/.env${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  mobile/.env j√° existe${NC}"
    fi
    
    cd ..
    
    echo ""
    echo -e "${GREEN}‚úÖ Mobile configurado com sucesso!${NC}"
    echo ""
fi

# ============================================
# DOCKER (OPCIONAL)
# ============================================

if [ "$HAS_DOCKER_COMPOSE" = true ]; then
    echo ""
    echo "üê≥ Deseja iniciar os containers Docker? (s/n)"
    read -r start_docker
    
    if [ "$start_docker" = "s" ] || [ "$start_docker" = "S" ]; then
        echo "üöÄ Iniciando containers Docker..."
        docker-compose up -d
        
        echo "‚è≥ Aguardando servi√ßos iniciarem..."
        sleep 5
        
        echo -e "${GREEN}‚úÖ Containers Docker iniciados${NC}"
        echo ""
        echo "üåê Servi√ßos Docker:"
        echo "  PostgreSQL: localhost:5432"
        echo "  Redis: localhost:6379"
    fi
fi

# ============================================
# RESUMO FINAL
# ============================================

echo ""
echo -e "${GREEN}================================================${NC}"
echo -e "${GREEN}‚úÖ SETUP CONCLU√çDO COM SUCESSO!${NC}"
echo -e "${GREEN}================================================${NC}"
echo ""
echo "üìù Pr√≥ximos passos:"
echo ""
echo "1Ô∏è‚É£  Editar arquivos .env (se necess√°rio):"
echo "   - backend/.env"
if [ "$SKIP_MOBILE" = false ]; then
    echo "   - mobile/.env"
fi
echo ""
echo "2Ô∏è‚É£  Iniciar o backend:"
echo "   cd backend"
echo "   source venv/bin/activate"
echo "   uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
echo ""
if [ "$SKIP_MOBILE" = false ]; then
    echo "3Ô∏è‚É£  Em outro terminal, iniciar o mobile:"
    echo "   cd mobile"
    echo "   npx expo start"
    echo "   (Pressione 'a' para Android, 'i' para iOS)"
    echo ""
fi
echo "üìö Documenta√ß√£o:"
echo "   API: http://localhost:8000/docs"
echo "   Setup: docs/SETUP.md"
echo "   Arquitetura: docs/ARCHITECTURE.md"
echo ""
echo "üîê Credenciais padr√£o:"
echo "   Email: admin@fitnessstore.com"
echo "   Senha: admin123"
echo ""
if [ "$HAS_DOCKER_COMPOSE" = true ]; then
    echo "üõë Para parar containers Docker:"
    echo "   docker-compose down"
    echo ""
fi
echo -e "${GREEN}Bom desenvolvimento! üöÄ${NC}"
echo ""
